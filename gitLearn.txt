git学习

- 经验：
	命令中所有用到<commit id>的地方都可以用HEAD指针代替
	
- 查看配置信息
	git config --list
	
- 创建版本库
	mkdir learngit #在当前目录新建一个空目录
	cd learngit 
	pwd #显示当前目录
	git init #把当前目录变成Git可以管理的仓库(repository)
	ls -ah #如果.git目录默认被隐藏，可用此命令显示
	#把一个文件添加到Git仓库：
		git add readme.txt
		git commit -m "wrote a txt"
	#可以一次性添加多个文件：
		git add file1.txt file2.txt
	#也可以一次性提交多个文件：
		git commit -m "add 2 files"
	
- 时光穿梭机
	git status #查看仓库当前的状态
	#也可以
		git status filename
	git diff #查看最近一次被修改的内容(difference)。红字表示删除内容，绿字表示增加的内容
	
- 版本回退
	git log #从近到远地显示提交commit的日志
		#每条日志里一大串数字是commit ID（版本号），这是一个有SHA1计算出来的非常大的数字，用16进制表示
	git log --pretty=oneline #简化输出信息
	Git中，用HEAD（一个指针）指向当前版本，也就是最新提交的版本，上一个版本是HEAD^，上上个HEAD^^，上一百个可为HEAD~100
	git reset --hard HEAD^ #回退到上一个版本，且回退之后再用git log发现最新提交的版本日志信息已经没了
	cat readme.txt #显示工作区内已经保存的文件内容
	git reset --hard 7bd0 #回退之后再回到未来的某个版本（用版本号指定，最少前4位）
	git reflog #可以显示每一次提交和回退命令，这样即使回退之后关掉了电脑还是可以回到未来啦啊哈哈!reflog大法好呀呀呀呀
	
- 工作区和暂存区
	#工作区(Working Directory)：就是在电脑上能看到的目录，如learn_git文件夹
	#版本库(Repository)：工作区内的目录".git"。里面存了许多东西，最重要的是stage（或者index）暂存区，
   还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	#git add是把工作区内的文件修改添加到暂存区，而git commit则是把暂存区的所有内容提交到当前分支
	#需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	
- 管理修改
	#若执行如下操作：第一次修改->git add -> 第二次修改 -> 提交
   则git会只提交第一次修改，因为git commit只负责把暂存区的修改提交
   
- 撤销修改
	git checkout -- readme.txt #撤销工作区的修改（此修改还未添加到暂存区）
	git reset HEAD readme.txt #将该文件的暂存区的修改回退到工作区，然后再用以上命令撤销工作区修改
	
- 删除文件
	rm test.txt #删除工作区内的文件，跟Ctrl+Delete效果一样，
	git rm test.txt #从版本库中删除该文件，连带工作区也删
	git commit -m "remove test.txt" #然后还得提交本次删除
		###从版本库中删除一个文件跟普通修改一样，需要先将此修改（删除）添加到暂存区(git rm)，然后再提交。
   因此在 git rm 之后可以用 git reset HEAD test.txt 从暂存区中撤销，但不知道这个撤销操作有啥用。。。
	git checkout -- test.txt #可以将工作区中没有而版本库中存在的文件最新版本恢复到工作区中
		###git checkout其实就是将版本库中的最新版本替换工作区中的版本

- 远程仓库
	#杀手级功能之一（还有之二，之三。。。）
	#实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆
   一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
	
- 添加远程库
	git remote add origin https://github.com/canonhui/learn_git.git #关联我的小远程库
	git push -u origin master #第一次推送分支master的所有内容
	git push origin master #每次本地提交后使用此命令推送最新修改

- 从远程库克隆
	git clone git@github.com:canonhui/git_skills.git #使用SSH协议克隆我的远程小金库哈哈
		#克隆后的本地仓库地址在当前目录下
	git clone https://github.com/canonhui/git_skills.git #使用HTTPS协议克隆
	#使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令（没见输入什么口令啊），
   但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
	#从远程库克隆下来的本地仓库就直接和远程库关联了，直接就可以推送
	
- 分支管理
	#暂时还不知道其真正用途
	
- 创建与合并分支
	git branch #查看所有分支以及确认当前分支
	git branch dev #创建新分支
	git checkout dev #切换到dev分支
	git branch -b dev #创建并切换到dev分支
	git merge dev #合并dev分支到当前分支
	git branch -d dev #删除dev分支
	#关于分支的工作原理如果忘了就去看教程吧，这里懒得总结了
	
- 解决冲突
	#所谓冲突(conflict)就是先在一个分支上修改文件，再切换到另一个分支上修改同一个文件，
   此时若合并这两个分支，则会产生冲突，解决冲突(fix conflict)就是手动修改文件之后再提交，
   提交之后会把两个分支合并，然后就可以删除新建的分支了。
	#Your branch is ahead of 'origin/master' by 1 commit.---意思是当前分支比远程master分支超前一个提交
	git log --graph --pretty=oneline --abbrev-commit #查看分支合并图
	
- 分支管理策略
	#合并分支时Git默认用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	#如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
   这样，从分支历史上就可以看出分支信息。命令如下：
	git merge --no-ff -m "merge with no-ff" dev #--no-ff表示禁用Fast forward。合并的同时还提交了
	#常用分支策略为：
		#master禁用来发布新版本，平时活不在上面干
		#活都在dev分支上干，活干到一个阶段的时候就往master上合并
		#各个小伙伴都从dev上创建一个分支，各自干活，时不时地合并到dev上

-bug分支
	#在Git中，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
	#工作到一半不能继续，被迫需要做其他事情时，先把不能提交的工作现场保存(stash)：
		git stash #暂存区和工作区的为提交文件都可以stash
	git stash list #查看所有保存的工作现场
	#回到工作现场有两种方法：
		git stash pop #恢复所有工作现场并同时删除stash内容
		git stash apply stash@{1} #恢复指定工作现场，但不删除
		git stash drop stash@{1} #删除指定工作现场
	#后一种方法的两条命令若没指定具体的stash，则操作对象为stash@{0}
	
- Feature分支
	#没添加一个新功能，最好新建一个feature分支
	git branch -D feature #强行删除一个没有被合并过的分支
	
- 多人协作
	#远程仓库默认名称是origin
	git remote #查看远程仓库信息（名称）
	git remote -v #显示可以抓取(fetch)和推送(push)分支的origin地址
- 推送分支
	#需要推送的分支
		#master：时刻与远程同步
		#dev：开发分支，同样应与远程同步
		#bug分支：一般没必要同步，除非老板要看你修复bug的进度
		#feature：是否同步取决于是否和小伙伴在上面合作开发
- 抓取分支
	#从远程库克隆到本地后，默认情况下，即使远程库有多个分支，本地也只能看到master主分支
	git checkout -b dev origin/dev #将远程的dev分支也克隆到本地
	#多人协作的工作模式通常是这样：
		1、首先，可以试图用git push origin branch-name推送自己的修改；
		2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		3、如果合并有冲突，则解决冲突，并在本地提交；
		4、没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	#如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
   用命令
		git branch --set-upstream branch-name origin/branch-name
	或者：
		git pull origin branch-name
   
- 标签管理
	#发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。
   将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
	#Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像，但是分支可以移动，标签不能移动）
	#标签的意义就是给某个特殊意义的commit赋予一个有意义的名字，便于日后调用commit
	
- 创建标签
	git tag v1.0 #给当前最新提交打个v1.0标签
	git tag #查看所有标签
	git tag <tagname> <commit id> #给指定提交打标签
	git show <tagname> #查看指定标签信息
	git tag -a <tagname> -m "text" <commit id> #创建带有说明文字的标签，-m参数指定说明文字
	#git show这条命令好像有挺多功能的，回头得细细研究一下
		git show #若v1.0为最新commit的标签，则此命令等同于 git show v1.0
	#可以通过-s参数用私钥签名一个标签，签名采用PGP签名，需首先安装gpg(GnuPG):
		git tag -s v0.2 -m "signed version 0.2 released" <commit id>
	#用PGP签了名的标签是不可伪造的
	


