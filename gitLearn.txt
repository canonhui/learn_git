git学习

- 查看配置信息
	git config --list
	
- 创建版本库
	mkdir learngit #在当前目录新建一个空目录
	cd learngit 
	pwd #显示当前目录
	git init #把当前目录变成Git可以管理的仓库(repository)
	ls -ah #如果.git目录默认被隐藏，可用此命令显示
	#把一个文件添加到Git仓库：
		git add readme.txt
		git commit -m "wrote a txt"
	#可以一次性添加多个文件：
		git add file1.txt file2.txt
	#也可以一次性提交多个文件：
		git commit -m "add 2 files"
	
- 时光穿梭机
	git status #查看仓库当前的状态
	#也可以
		git status filename
	git diff #查看最近一次被修改的内容(difference)
	
- 版本回退
	git log #从近到远地显示提交commit的日志
		#每条日志里一大串数字是commit ID（版本号），这是一个有SHA1计算出来的非常大的数字，用16进制表示
	git log --pretty=oneline #简化输出信息
	Git中，用HEAD（一个指针）指向当前版本，也就是最新提交的版本，上一个版本是HEAD^，上上个HEAD^^，上一百个可为HEAD~100
	git reset --hard HEAD^ #回退到上一个版本，且回退之后再用git log发现最新提交的版本日志信息已经没了
	cat readme.txt #显示工作区内已经保存的文件内容
	git reset --hard 7bd0 #回退之后再回到未来的某个版本（用版本号指定，最少前4位）
	git reflog #可以显示每一次提交和回退命令，这样即使回退之后关掉了电脑还是可以回到未来啦啊哈哈!reflog大法好呀呀呀呀
	
- 工作区和暂存区
	#工作区(Working Directory)：就是在电脑上能看到的目录，如learn_git文件夹
	#版本库(Repository)：工作区内的目录".git"。里面存了许多东西，最重要的是stage（或者index）暂存区，
   还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	#git add是把工作区内的文件修改添加到暂存区，而git commit则是把暂存区的所有内容提交到当前分支
	#需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
	
- 管理修改
	#若执行如下操作：第一次修改->git add -> 第二次修改 -> 提交
   则git会只提交第一次修改，因为git commit只负责把暂存区的修改提交
   
- 撤销修改
	git checkout -- readme.txt #撤销工作区的修改（此修改还未添加到暂存区）
	git reset HEAD readme.txt #将该文件的暂存区的修改回退到工作区，然后再用以上命令撤销工作区修改
	
- 删除文件
	rm test.txt #删除工作区内的文件，跟Ctrl+Delete效果一样，
	git rm test.txt #从版本库中删除该文件，连带工作区也删
	git commit -m "remove test.txt" #然后还得提交本次删除
		###从版本库中删除一个文件跟普通修改一样，需要先将此修改（删除）添加到暂存区(git rm)，然后再提交。
   因此在 git rm 之后可以用 git reset HEAD test.txt 从暂存区中撤销，但不知道这个撤销操作有啥用。。。
	git checkout -- test.txt #可以将工作区中没有而版本库中存在的文件最新版本恢复到工作区中
		###git checkout其实就是将版本库中的最新版本替换工作区中的版本

- 远程仓库
	#杀手级功能之一（还有之二，之三。。。）
	#实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆
   一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
	
- 添加远程库
	git remote add origin https://github.com/canonhui/learn_git.git #关联我的小远程库
	git push -u origin master #第一次推送分支master的所有内容
	git push origin master #每次本地提交后使用此命令推送最新修改
